/* ===== app.min.js (rebuild; index/quiz/result pages) ===== */
(function () {
  "use strict";

  // ---------- Utils ----------
  const $  = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
  const escapeHtml = (s) => String(s ?? "").replace(/[&<>"']/g, (c) => ({ "&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;" }[c]));

  function pageName() {
    return (location.pathname.split("/").pop() || "index.html").toLowerCase();
  }

  // Simple seeded RNG (fallback if seedrandom is absent)
  function seedLCG(seed) {
    let s = (typeof seed === "number" ? seed : Date.now()) % 2147483647;
    if (s <= 0) s += 2147483646;
    return function () { s = (s * 48271) % 2147483647; return (s - 1) / 2147483646; };
  }
  function seededShuffle(arr, seed) {
    const a = arr.slice();
    const rnd = (window.seedrandom ? window.seedrandom(String(seed)) : seedLCG(seed));
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(rnd() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  }

  // Storage helpers (namespaced)
  const NS = "jung8v:";
  const Store = {
    get(key, def = null) { try { const v = localStorage.getItem(NS + key); return v ? JSON.parse(v) : def; } catch { return def; } },
    set(key, val) { localStorage.setItem(NS + key, JSON.stringify(val)); },
    del(key) { localStorage.removeItem(NS + key); }
  };

  // 讓所有相對路徑在 GH Pages 子路徑下仍安全
  const Path = {
    url(rel) { return new URL(rel, document.baseURI).href; },
    data(name) { return this.url(`./data/${name}`); }
  };

  // ---------- Index ----------
  function initIndex() {
    const btnStart32      = $("#btnStart32");
    const btnContinue     = $("#btnContinue");
    const btnClearThisTab = $("#btnClearThisTab");
    const buildInfo       = $("#buildInfo");

    // 顯示簡單 build 資訊（可有可無）
    if (buildInfo) {
      const ts = new Date().toISOString().replace("T"," ").replace("Z","");
      buildInfo.textContent = `build @ ${ts}`;
    }

    // 開始 32 題
    btnStart32?.addEventListener("click", () => {
      Store.del("basicAnswers");
      Store.del("basicMeta");
      location.href = "./quiz.html?mode=basic";
    });

    // 續上次（若有 meta 記錄 idx）
    btnContinue?.addEventListener("click", () => {
      const meta = Store.get("basicMeta") || Store.get("advMeta");
      const mode = meta?.dataUrl?.includes("_adv_") ? "advanced" : "basic";
      location.href = `./quiz.html?mode=${mode}`;
    });

    // 清除此分頁作答
    btnClearThisTab?.addEventListener("click", () => {
      try { sessionStorage.clear(); localStorage.removeItem(NS + "quiz_progress"); } catch(e){}
      alert("已清除此分頁的作答紀錄。");
    });
  }

  // ---------- Quiz ----------
  async function initQuiz() {
    // 對齊你給的 quiz.html IDs
    const qTitle       = $("#qTitle");
    const qText        = $("#qText");
    const answersBox   = $("#answers");
    const btnPrev      = $("#btnPrev");
    const btnNext      = $("#btnNext");
    const btnClear     = $("#btnClear");
    const progressWrap = $("#progress");
    const progressText = $("#progressText");
    const progressBar  = $("#progressBar");
    const advPanel     = $("#advPanel");

    // 必要節點不存在就不執行（避免在其他頁報錯）
    if (!qTitle || !qText || !answersBox || !btnNext || !progressWrap) return;

    const qs   = new URLSearchParams(location.search);
    const mode = (qs.get("mode") || "basic").toLowerCase(); // "basic" or "advanced"
    const DATA_URL = mode === "basic"
      ? Path.data("items_public_32.json")
      : Path.data("items_public_adv_A.json"); // 先支援 A 組；B/C 可再擴充
    const stateKey = mode === "basic" ? "basicAnswers" : "advAnswers";
    const metaKey  = mode === "basic" ? "basicMeta"   : "advMeta";
    const titleMap = { basic: "第一階段｜32 題（八維傾向）", advanced: "第二階段｜進階分析" };
    qTitle.textContent = titleMap[mode] || "作答中";

    // 載題庫
    let items = [];
    try {
      const res = await fetch(DATA_URL, { cache: "no-store" });
      if (!res.ok) throw new Error(`載入題庫失敗（${res.status}）`);
      items = await res.json();
      if (!Array.isArray(items) || !items.length) throw new Error("題庫格式錯誤或為空");
    } catch (err) {
      console.error(err);
      alert("題庫載入失敗，請檢查 docs/data/ 路徑與檔案是否存在。");
      return;
    }

    // 洗題順序（固定一個整數種子）
    const seed = Number(new Date().toISOString().slice(0,19).replace(/[-:T]/g,"")) % 1000000;
    const order = seededShuffle(items.map((_, i) => i), seed);

    // 讀作答與進度
    let idx = 0;
    let currentAnswers;

    const savedMeta = Store.get(metaKey, null);
    if (mode === "basic") {
      currentAnswers = Store.get(stateKey, null);
      if (!Array.isArray(currentAnswers) || currentAnswers.length !== items.length) currentAnswers = new Array(items.length).fill(null);
      if (savedMeta?.dataUrl && savedMeta.dataUrl.endsWith("items_public_32.json"))
        idx = Math.min(savedMeta.idx ?? 0, items.length - 1);
    } else {
      const adv = Store.get(stateKey, {}) || {};
      if (!Array.isArray(adv.A) || adv.A.length !== items.length) adv.A = new Array(items.length).fill(null);
      currentAnswers = adv.A;
      Store.set(stateKey, adv);
      if (savedMeta?.dataUrl && /items_public_adv_/i.test(savedMeta.dataUrl))
        idx = Math.min(savedMeta.idx ?? 0, items.length - 1);
    }

    // 渲染一次（含 1~5 量表）
    render();

    // 綁定按鈕
    btnPrev?.addEventListener("click", () => {
      if (idx > 0) { idx--; render(); }
    });

    btnNext?.addEventListener("click", () => {
      const i = order[idx];
      // 沒作答不前進
      if (currentAnswers[i] === null || currentAnswers[i] === undefined) return;

      if (idx < items.length - 1) {
        idx++;
        render();
      } else {
        if (mode === "basic") {
          // 完成 32 題，顯示進階選項
          if (advPanel) {
            advPanel.style.display = "block";
            // 綁定一次（若未綁）
            $("#btnAdvA")?.addEventListener("click", () => location.href = "./quiz.html?mode=advanced");
            $("#btnAdvB")?.addEventListener("click", () => alert("進階 B 組尚未啟用，之後可擴充。"));
            $("#btnAdvC")?.addEventListener("click", () => alert("進階 C 組尚未啟用，之後可擴充。"));
            $("#btnSeeBasic")?.addEventListener("click", () => location.href = "./result_basic.html");
          } else {
            // 若沒有 advPanel（比如你不想中繼面板），就直接詢問
            const goAdv = confirm("32 題完成！\n按「確定」進入進階 56 題（A 組），按「取消」直接看結果。");
            if (goAdv) location.href = "./quiz.html?mode=advanced";
            else location.href = "./result_basic.html";
          }
        } else {
          // 進階 A 完成 → 進階結果
          location.href = "./result_advanced.html";
        }
      }
    });

    btnClear?.addEventListener("click", () => {
      const i = order[idx];
      currentAnswers[i] = null;
      persist();
      render();
    });

    // 鍵盤快捷鍵：1–5/左右鍵/Backspace,R
    document.addEventListener("keydown", (ev) => {
      // 量表值對應
      const keyMap = { "1": -2, "2": -1, "3": 0, "4": 1, "5": 2 };
      if (keyMap[ev.key] !== undefined) {
        setAnswer(keyMap[ev.key]); return;
      }
      if (ev.key === "ArrowLeft")  { btnPrev?.click(); }
      if (ev.key === "ArrowRight") { btnNext?.click(); }
      if (ev.key === "Backspace" || ev.key.toLowerCase() === "r") { btnClear?.click(); }
    });

    function setAnswer(val) {
      const i = order[idx];
      currentAnswers[i] = val;
      persist();
      // 啟用下一題
      btnNext?.removeAttribute("disabled");
      // 選取樣式
      $$("#answers .scale-btn").forEach(b => b.classList.toggle("selected", Number(b.dataset.val) === val));
    }

    function persist() {
      if (mode === "basic") {
        Store.set(stateKey, currentAnswers);
      } else {
        const adv = Store.get(stateKey, {}) || {};
        adv.A = currentAnswers;
        Store.set(stateKey, adv);
      }
      Store.set(metaKey, { dataUrl: DATA_URL, idx, total: items.length, ts: Date.now() });
    }

    function render() {
      const i = order[idx];
      const q = items[i];

      // 題幹與 A/B 文案
      qText.innerHTML = `
        <div class="qid">第 ${idx + 1} 題 / 共 ${items.length} 題</div>
        <div class="stem">${escapeHtml(q.stem ?? "")}</div>
        <div class="pair muted" style="margin-top:8px">
          <div><span class="badge">A</span> ${escapeHtml(q.options?.[0] ?? "選項 A")}</div>
          <div><span class="badge">B</span> ${escapeHtml(q.options?.[1] ?? "選項 B")}</div>
        </div>
      `;

      // 渲染 1~5 量表（-2..2）
      const labels = ["非常同意A","較同意A","中立","較同意B","非常同意B"];
      const vals   = [-2,-1,0,1,2];
      const curVal = currentAnswers[i];

      answersBox.innerHTML = `
        <div class="scale-wrap">
          ${vals.map((v, idx2) =>
            `<button type="button" class="scale-btn${v===curVal?' selected':''}" data-val="${v}">
               <span class="k">${idx2+1}</span><span class="t">${labels[idx2]}</span>
             </button>`).join("")}
        </div>
      `;

      // 綁量表 click
      $$("#answers .scale-btn").forEach(btn => {
        btn.addEventListener("click", () => setAnswer(Number(btn.dataset.val)));
      });

      // 進度
      const done = currentAnswers.filter(v => v !== null && v !== undefined).length;
      if (progressText) progressText.textContent = `${done} / ${items.length}（${Math.round(done/items.length*100)}%）`;
      if (progressBar)  progressBar.style.width = Math.round(done/items.length*100) + "%";

      // 上一題/下一題狀態
      if (btnPrev) btnPrev.disabled = (idx === 0);
      if (btnNext) {
        if (done <= i && (curVal === null || curVal === undefined)) btnNext.setAttribute("disabled","true");
        else btnNext.removeAttribute("disabled");
        btnNext.textContent = (idx === items.length - 1) ? "完成" : "下一題 →";
      }

      // 完成 32 題時先隱 advPanel（待點完成時才顯）
      if (advPanel && mode === "basic") advPanel.style.display = "none";
    }
  }

  // ---------- Basic Result ----------
  function initResultBasic() {
    const root = $("#result-root");
    if (!root) return;

    const answers = Store.get("basicAnswers", null);
    if (!answers) {
      alert("找不到 32 題作答紀錄，請先完成測驗。");
      location.href = "./quiz.html?mode=basic";
      return;
    }

    // mount canvas + export btn
    root.innerHTML = `
      <section class="card">
        <h1 class="title">初步結果（分佈圖）</h1>
        <canvas id="distChart" width="400" height="240"></canvas>
        <div class="actions" style="margin-top:12px;">
          <a class="btn" href="./index.html">回首頁</a>
          <button id="exportBtn" class="btn">匯出作答 JSON</button>
        </div>
      </section>
    `;

    const dist = { "-2": 0, "-1": 0, "0": 0, "1": 0, "2": 0 };
    answers.forEach((v) => { if (v !== null && v !== undefined) dist[v]++; });

    const canvas = $("#distChart");
    if (window.Chart && canvas?.getContext) {
      new Chart(canvas.getContext("2d"), {
        type: "bar",
        data: {
          labels: ["非常同意A","較同意A","中立","較同意B","非常同意B"],
          datasets: [{ label: "作答分布（題數）", data: [dist["-2"], dist["-1"], dist["0"], dist["1"], dist["2"]] }]
        },
        options: {
          responsive: true,
          plugins: { legend: { display: false } },
          scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
        }
      });
    }

    $("#exportBtn")?.addEventListener("click", () => {
      const blob = new Blob([JSON.stringify(answers, null, 2)], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url; a.download = "basicAnswers.json";
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(url);
    });
  }

  // ---------- Advanced Result ----------
  function initResultAdvanced() {
    const root = $("#result-root");
    if (!root) return;

    const basic = Store.get("basicAnswers", null);
    const adv   = Store.get("advAnswers", null);

    root.innerHTML = `
      <section class="card">
        <h1 class="title">進階結果（完成度）</h1>
        <ul id="status" class="list"></ul>
        <div class="actions" style="margin-top:12px;">
          <a class="btn" href="./quiz.html?mode=advanced">繼續進階作答</a>
          <a class="btn primary" href="./result_basic.html">回到初步結果</a>
          <a class="btn ghost" href="./index.html">回首頁</a>
        </div>
      </section>
    `;

    const status = $("#status");
    const rows = [];
    rows.push(`<li>32 題（八維傾向）：${basic ? "✅ 已完成" : "❌ 未完成"}</li>`);
    if (adv && typeof adv === "object") {
      rows.push(`<li>進階 A（主外-輔內 24 題）：${Array.isArray(adv.A) && adv.A.some(v => v !== null && v !== undefined) ? "✅" : "❌"}</li>`);
      rows.push(`<li>進階 B（主內-輔外 24 題）：${Array.isArray(adv.B) && adv.B.some(v => v !== null && v !== undefined) ? "✅" : "❌"}</li>`);
      rows.push(`<li>進階 C（SJ/SP/NT/NF 8 題）：${Array.isArray(adv.C) && adv.C.some(v => v !== null && v !== undefined) ? "✅" : "❌"}</li>`);
    } else {
      rows.push("<li>進階題組：❌ 未開始</li>");
    }
    status.innerHTML = rows.join("");
  }

  // ---------- Bootstrap ----------
  function boot() {
    const p = pageName();
    try {
      if (p === "index.html")               initIndex();
      else if (p === "quiz.html")           initQuiz();
      else if (p === "result_basic.html")   initResultBasic();
      else if (p === "result_advanced.html")initResultAdvanced();
    } catch (e) { console.error("[Boot Error]", e); }
  }

  document.addEventListener("DOMContentLoaded", boot);

  // 導出到全域，讓 probe 看到 App 不是 undefined
  window.App = { initIndex, initQuiz, initResultBasic, initResultAdvanced, boot, version: "2025-09-13" };
})();
