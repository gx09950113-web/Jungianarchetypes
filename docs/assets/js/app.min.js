/* ===== app.min.js (index/quiz/result; Advanced A/B/C + Eight-Function Scoring) ===== */
(function () {
  "use strict";

  /* ---------- Utils ---------- */
  const $  = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
  const esc = (s) => String(s ?? "").replace(/[&<>"']/g, (c) => ({ "&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}[c]));
  const pageName = () => (location.pathname.split("/").pop() || "index.html").toLowerCase();

  // RNG（若沒 seedrandom 則用 fallback）
  function seedLCG(seed){ let s=(typeof seed==="number"?seed:Date.now())%2147483647; if(s<=0)s+=2147483646; return ()=>{ s=(s*48271)%2147483647; return (s-1)/2147483646; }; }
  function seededShuffle(arr, seed){ const a=arr.slice(); const rnd=(window.seedrandom?window.seedrandom(String(seed)):seedLCG(seed)); for(let i=a.length-1;i>0;i--){ const j=Math.floor(rnd()*(i+1)); [a[i],a[j]]=[a[j],a[i]]; } return a; }

  // Storage（加命名空間）
  const NS="jung8v:";
  const Store={
    get(k,d=null){ try{ const v=localStorage.getItem(NS+k); return v?JSON.parse(v):d; }catch{ return d; } },
    set(k,v){ localStorage.setItem(NS+k, JSON.stringify(v)); },
    del(k){ localStorage.removeItem(NS+k); }
  };

  // 路徑工具：確保 GH Pages 子路徑相容
  const Path={ url(rel){ return new URL(rel, document.baseURI).href; }, data(n){ return this.url(`./data/${n}`); } };

  /* ---------- Weights & Func Names Loader ---------- */
  // 你可以在 build 時注入：
  // 1) window.__getWeights = () => ({ basic:[...], advA:[...], advB:[...], advC:[...] })
  // 2) window.__WEIGHTS_B64 = "<gzip+base64 的 JSON>"
  // 3) window.__WEIGHTS_JSON = {...}
  // Func 名稱也可注入：
  // 1) window.__getFuncNames = () => ["Se","Si","Ne","Ni","Te","Ti","Fe","Fi"]
  // 2) window.__FUNCS__ = [...]
  function decodeB64ToJson(b64){
    try{
      const bin = atob(b64);
      const bytes = new Uint8Array(bin.length);
      for (let i=0;i<bin.length;i++) bytes[i]=bin.charCodeAt(i);
      if (window.pako && window.pako.ungzip) {
        const txt = window.pako.ungzip(bytes, { to: "string" });
        return JSON.parse(txt);
      }
      // 沒 pako 就當作未壓縮 JSON（保底）
      return JSON.parse(new TextDecoder().decode(bytes));
    }catch(e){ return null; }
  }
  function getWeights(){
    try{
      if (typeof window.__getWeights === "function") return window.__getWeights();
      if (window.__WEIGHTS_B64) {
        const j = decodeB64ToJson(window.__WEIGHTS_B64);
        if (j) return j;
      }
      if (window.__WEIGHTS_JSON) return window.__WEIGHTS_JSON;
    }catch(e){}
    return null;
  }
  function getFuncNames(){
    try{
      if (typeof window.__getFuncNames === "function") return window.__getFuncNames();
      if (Array.isArray(window.__FUNCS__)) return window.__FUNCS__;
    }catch(e){}
    // fallback
    return ["F0","F1","F2","F3","F4","F5","F6","F7"];
  }

  // 將單題的權重 + 回答值，轉成 8 維貢獻
  // 支援幾種形狀：
  // - [w0..w7]：直接 val * w[f]
  // - {A:[...], B:[...]}：val<0 用 A * |val|，val>=0 用 B * val
  // - {w:[...]}：val * w[f]
  function applyItemWeights(wEntry, val){
    const zero = Array(8).fill(0);
    if (wEntry == null || val == null) return zero;
    const abs = Math.abs(val);
    let vec = null;
    if (Array.isArray(wEntry)) {
      vec = wEntry;
      return vec.map(w => (w || 0) * val);
    }
    if (wEntry && typeof wEntry === "object") {
      if (Array.isArray(wEntry.w)) {
        vec = wEntry.w;
        return vec.map(w => (w || 0) * val);
      }
      if (Array.isArray(wEntry.A) && Array.isArray(wEntry.B)) {
        vec = (val >= 0 ? wEntry.B : wEntry.A);
        return vec.map(w => (w || 0) * abs);
      }
    }
    return zero;
  }

  // 彙總 8 維
  function scoreEight(answers, weightsArray){
    const total = Array(8).fill(0);
    if (!Array.isArray(answers) || !Array.isArray(weightsArray)) return total;
    const n = Math.min(answers.length, weightsArray.length);
    for (let i=0;i<n;i++){
      const a = answers[i];
      if (a == null) continue;
      const contrib = applyItemWeights(weightsArray[i], a);
      for (let f=0; f<8; f++) total[f] += (contrib[f] || 0);
    }
    return total;
  }

  /* ---------- Index ---------- */
  function initIndex(){
    const btnStart32      = $("#btnStart32");
    const btnContinue     = $("#btnContinue");
    const btnClearThisTab = $("#btnClearThisTab");
    const buildInfo       = $("#buildInfo");

    if (buildInfo) {
      const ts = new Date().toISOString().replace("T"," ").replace("Z","");
      buildInfo.textContent = `build @ ${ts}`;
    }

    // 開始 32 題
    btnStart32?.addEventListener("click", ()=>{
      Store.del("basicAnswers"); Store.del("basicMeta");
      location.href = "./quiz.html?mode=basic";
    });

    // 續上次：優先續上 A/B/C 中「最後更新」的那組；否則回 basic（若 basic 有 meta）
    btnContinue?.addEventListener("click", ()=>{
      const metas = ["A","B","C"].map(s=>({ s, m:Store.get(`advMeta${s}`) })).filter(x=>!!x.m);
      if (metas.length){
        metas.sort((a,b)=> (b.m?.ts||0) - (a.m?.ts||0));
        location.href = `./quiz.html?mode=advanced&set=${metas[0].s}`;
        return;
      }
      if (Store.get("basicMeta")) {
        location.href = "./quiz.html?mode=basic";
      } else {
        location.href = "./quiz.html?mode=basic";
      }
    });

    // 清除此分頁作答
    btnClearThisTab?.addEventListener("click", ()=>{
      try{ sessionStorage.clear(); localStorage.removeItem(NS + "quiz_progress"); }catch(e){}
      alert("已清除此分頁的作答紀錄。");
    });
  }

  /* ---------- Quiz (basic / advanced A/B/C) ---------- */
  async function initQuiz(){
    // 與你的 quiz.html IDs 對齊
    const qTitle       = $("#qTitle");
    const qText        = $("#qText");
    const answersBox   = $("#answers");
    const btnPrev      = $("#btnPrev");
    const btnNext      = $("#btnNext");
    const btnClear     = $("#btnClear");
    const progressText = $("#progressText");
    const progressBar  = $("#progressBar");
    const advPanel     = $("#advPanel");
    if (!qTitle || !qText || !answersBox || !btnNext) return;

    const qs   = new URLSearchParams(location.search);
    const mode = (qs.get("mode") || "basic").toLowerCase();   // "basic" | "advanced"
    const set  = (qs.get("set")  || "A").toUpperCase();       // "A"|"B"|"C"（僅 advanced）

    const ADV_FILE = { A: "items_public_adv_A.json", B: "items_public_adv_B.json", C: "items_public_adv_C.json" };
    const DATA_URL = (mode === "basic")
      ? Path.data("items_public_32.json")
      : Path.data(ADV_FILE[set] || ADV_FILE.A);

    const stateKey = (mode === "basic") ? "basicAnswers" : "advAnswers";
    const metaKey  = (mode === "basic") ? "basicMeta"    : `advMeta${set}`;

    const titleBasic = "第一階段｜32 題（八維傾向）";
    const titleAdv   = { A: "第二階段｜進階 A 組", B: "第二階段｜進階 B 組", C: "第二階段｜進階 C 組" };
    qTitle.textContent = (mode === "basic") ? titleBasic : (titleAdv[set] || titleAdv.A);

    // 載入題庫
    let items = [];
    try{
      const res = await fetch(DATA_URL, { cache: "no-store" });
      if (!res.ok) throw new Error(`載入題庫失敗（${res.status}）`);
      items = await res.json();
      if (!Array.isArray(items) || !items.length) throw new Error("題庫格式錯誤或為空");
    }catch(err){
      console.error(err);
      alert("題庫載入失敗，請檢查 docs/data/ 路徑與檔案是否存在。");
      return;
    }

    // 題序（以固定種子洗牌；你日後可改為穩定種子）
    const seed  = Number(new Date().toISOString().slice(0,19).replace(/[-:T]/g,"")) % 1000000;
    const order = seededShuffle(items.map((_,i)=>i), seed);

    // 作答狀態
    let idx = 0;
    let currentAnswers;
    const savedMeta = Store.get(metaKey, null);

    if (mode === "basic") {
      currentAnswers = Store.get(stateKey, null);
      if (!Array.isArray(currentAnswers) || currentAnswers.length !== items.length) currentAnswers = new Array(items.length).fill(null);
      if (savedMeta?.dataUrl && savedMeta.dataUrl.endsWith("items_public_32.json")) {
        idx = Math.min(savedMeta.idx ?? 0, items.length - 1);
      }
    } else {
      const adv = Store.get(stateKey, {}) || {};
      // 確保 A/B/C 陣列存在且長度與題庫相符（A:24, B:24, C:8）
      ["A","B","C"].forEach(s=>{
        if (!Array.isArray(adv[s]) || adv[s].length !== items.length) adv[s] = new Array(items.length).fill(null);
      });
      currentAnswers = adv[set];
      Store.set(stateKey, adv);
      if (savedMeta?.dataUrl && /items_public_adv_/i.test(savedMeta.dataUrl)) {
        idx = Math.min(savedMeta.idx ?? 0, items.length - 1);
      }
    }

    // 初次渲染
    render();

    // 事件綁定
    btnPrev?.addEventListener("click", ()=>{ if (idx > 0){ idx--; render(); } });
    btnNext?.addEventListener("click", ()=>{
      const i = order[idx];
      if (currentAnswers[i] == null) return; // 沒作答不前進
      if (idx < items.length - 1) { idx++; render(); }
      else {
        if (mode === "basic") {
          // 32 題完成 → 顯示進階 A/B/C 選擇
          if (advPanel) {
            advPanel.style.display = "block";
            $("#btnAdvA")?.addEventListener("click", ()=> location.href="./quiz.html?mode=advanced&set=A");
            $("#btnAdvB")?.addEventListener("click", ()=> location.href="./quiz.html?mode=advanced&set=B");
            $("#btnAdvC")?.addEventListener("click", ()=> location.href="./quiz.html?mode=advanced&set=C");
            $("#btnSeeBasic")?.addEventListener("click", ()=> location.href="./result_basic.html");
          } else {
            const goAdv = confirm("32 題完成！\n確定 → 進入進階 A 組；取消 → 直接看結果");
            if (goAdv) location.href = "./quiz.html?mode=advanced&set=A"; else location.href="./result_basic.html";
          }
        } else {
          // 進階（任一組）完成 → 進階結果頁
          location.href = "./result_advanced.html";
        }
      }
    });
    btnClear?.addEventListener("click", ()=>{ const i=order[idx]; currentAnswers[i]=null; persist(); render(); });

    // 鍵盤快捷：1–5 / ←→ / Backspace or R
    document.addEventListener("keydown", (ev)=>{
      const map={"1":-2,"2":-1,"3":0,"4":1,"5":2};
      if (map[ev.key] != null){ setAnswer(map[ev.key]); return; }
      if (ev.key === "ArrowLeft")  btnPrev?.click();
      if (ev.key === "ArrowRight") btnNext?.click();
      if (ev.key === "Backspace" || ev.key.toLowerCase() === "r") btnClear?.click();
    });

    // 點量表
    $("#answers")?.addEventListener("click", (e)=>{
      const btn = e.target.closest(".scale-btn"); if (!btn) return;
      setAnswer(Number(btn.dataset.val));
    });

    function setAnswer(v){
      const i = order[idx];
      currentAnswers[i] = v;
      persist();
      btnNext?.removeAttribute("disabled");
      $$("#answers .scale-btn").forEach(b=> b.classList.toggle("selected", Number(b.dataset.val)===v));
    }

    function persist(){
      if (mode === "basic") {
        Store.set(stateKey, currentAnswers);
      } else {
        const adv = Store.get(stateKey, {}) || {};
        adv[set] = currentAnswers;
        Store.set(stateKey, adv);
      }
      Store.set(metaKey, { dataUrl: DATA_URL, idx, total: items.length, ts: Date.now(), set });
    }

    function render(){
      const i = order[idx];
      const q = items[i];
      qText.innerHTML = `
        <div class="qid">第 ${idx+1} 題 / 共 ${items.length} 題</div>
        <div class="stem">${esc(q.stem ?? "")}</div>
        <div class="pair muted" style="margin-top:8px">
          <div><span class="badge">A</span> ${esc(q.options?.[0] ?? "選項 A")}</div>
        <div><span class="badge">B</span> ${esc(q.options?.[1] ?? "選項 B")}</div>
        </div>
      `;

      const labels=["非常同意A","較同意A","中立","較同意B","非常同意B"];
      const vals=[-2,-1,0,1,2];
      const cur=currentAnswers[i];

      answersBox.innerHTML = `
        <div class="scale-wrap">
          ${vals.map((v,idx2)=>`
            <button type="button" class="scale-btn${v===cur?' selected':''}" data-val="${v}">
              <span class="k">${idx2+1}</span><span class="t">${labels[idx2]}</span>
            </button>`).join("")}
        </div>
      `;

      const done = currentAnswers.filter(v=>v!=null).length;
      progressText && (progressText.textContent = `${done} / ${items.length}（${Math.round(done/items.length*100)}%）`);
      progressBar  && (progressBar.style.width = Math.round(done/items.length*100) + "%");

      btnPrev && (btnPrev.disabled = (idx === 0));
      if (btnNext){
        if (cur == null) btnNext.setAttribute("disabled","true"); else btnNext.removeAttribute("disabled");
        btnNext.textContent = (idx === items.length - 1) ? "完成" : "下一題 →";
      }

      if (advPanel && mode === "basic") advPanel.style.display = "none";
    }
  }

  /* ---------- Result: Basic（分佈 + 八維長條圖） ---------- */
  function initResultBasic(){
    const root = $("#result-root"); if (!root) return;
    const answers = Store.get("basicAnswers", null);
    if (!answers){ alert("找不到 32 題作答紀錄，請先完成測驗。"); location.href="./quiz.html?mode=basic"; return; }

    // 版面：上面分佈、下面八維（若找得到權重）
    root.innerHTML = `
      <section class="card">
        <h1 class="title">初步結果</h1>
        <div class="chart-wrap">
          <h3 class="muted" style="margin:0 0 8px">作答分佈</h3>
          <canvas id="distChart" width="400" height="220"></canvas>
        </div>
        <div id="eightWrap" class="chart-wrap" style="display:none">
          <h3 class="muted" style="margin:0 0 8px">八維長條圖</h3>
          <canvas id="eightChart" width="400" height="240"></canvas>
        </div>
        <div class="actions" style="margin-top:12px;">
          <a class="btn" href="./index.html">回首頁</a>
          <button id="exportBtn" class="btn">匯出作答 JSON</button>
        </div>
      </section>
    `;

    // 分佈圖
    const dist={"-2":0,"-1":0,"0":0,"1":0,"2":0};
    answers.forEach(v=>{ if(v!=null) dist[v]++; });
    const c1=$("#distChart");
    if (window.Chart && c1?.getContext){
      new Chart(c1.getContext("2d"), {
        type:"bar",
        data:{ labels:["非常同意A","較同意A","中立","較同意B","非常同意B"], datasets:[{ label:"題數", data:[dist["-2"],dist["-1"],dist["0"],dist["1"],dist["2"]] }] },
        options:{ responsive:true, plugins:{legend:{display:false}}, scales:{ y:{ beginAtZero:true, ticks:{precision:0} } } }
      });
    }

    // 嘗試八維計分
    try{
      const W = getWeights();            // 期待 W.basic 是 32 題的配分陣列
      const names = getFuncNames();      // 8 維名稱（若沒有就 F0..F7）
      if (W && (Array.isArray(W.basic) || Array.isArray(W.weights_32))) {
        const wArr = Array.isArray(W.basic) ? W.basic : W.weights_32;
        const totals = scoreEight(answers, wArr);
        const c2 = $("#eightChart");
        $("#eightWrap").style.display = "block";
        if (window.Chart && c2?.getContext){
          new Chart(c2.getContext("2d"), {
            type:"bar",
            data:{ labels:names, datasets:[{ label:"分數", data:totals }] },
            options:{
              responsive:true,
              plugins:{ legend:{ display:false }, tooltip:{ callbacks:{ label:(ctx)=>` ${ctx.formattedValue}` } } },
              scales:{ y:{ beginAtZero:true } }
            }
          });
        }
      }
    }catch(e){
      // 權重不存在或格式不符：忽略，不中斷
      console.warn("[eight-score] no weights / skipped", e);
    }

    $("#exportBtn")?.addEventListener("click", ()=>{
      const blob=new Blob([JSON.stringify(answers,null,2)],{type:"application/json"});
      const url=URL.createObjectURL(blob); const a=document.createElement("a");
      a.href=url; a.download="basicAnswers.json"; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    });
  }

  /* ---------- Result: Advanced（完成度） ---------- */
  function initResultAdvanced(){
    const root=$("#result-root"); if (!root) return;
    const basic=Store.get("basicAnswers", null);
    const adv=Store.get("advAnswers", {}) || {};

    root.innerHTML = `
      <section class="card">
        <h1 class="title">進階結果（完成度）</h1>
        <ul id="status" class="list"></ul>
        <div class="actions" style="margin-top:12px;">
          <a class="btn" href="./quiz.html?mode=advanced&set=A">進階 A</a>
          <a class="btn" href="./quiz.html?mode=advanced&set=B">進階 B</a>
          <a class="btn" href="./quiz.html?mode=advanced&set=C">進階 C</a>
          <a class="btn primary" href="./result_basic.html">回到初步結果</a>
          <a class="btn ghost" href="./index.html">回首頁</a>
        </div>
      </section>
    `;

    const status=$("#status");
    const done = (arr)=> Array.isArray(arr) && arr.some(v=>v!=null) ? "✅" : "❌";
    status.innerHTML = [
      `<li>32 題（八維傾向）：${basic ? "✅ 已完成" : "❌ 未完成"}</li>`,
      `<li>進階 A（主外-輔內 24 題）：${done(adv.A)}</li>`,
      `<li>進階 B（主內-輔外 24 題）：${done(adv.B)}</li>`,
      `<li>進階 C（SJ/SP/NT/NF 8 題）：${done(adv.C)}</li>`
    ].join("");
  }

  /* ---------- Bootstrap ---------- */
  function boot(){
    const p = pageName();
    try{
      if (p === "index.html")               initIndex();
      else if (p === "quiz.html")           initQuiz();
      else if (p === "result_basic.html")   initResultBasic();
      else if (p === "result_advanced.html")initResultAdvanced();
    }catch(e){ console.error("[Boot Error]", e); }
  }
  document.addEventListener("DOMContentLoaded", boot);

  // 暴露給全域（probe 用）
  window.App = {
    boot, initIndex, initQuiz, initResultBasic, initResultAdvanced,
    version: "2025-09-13-ABC+8D"
  };
})();