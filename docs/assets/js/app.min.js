/* ===== app.min.js (dev) ===== */
(function () {
  "use strict";

  // ---------- Utilities ----------
  const $ = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
  const escapeHtml = (s) =>
    s.replace(/[&<>"']/g, (c) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }[c]));

  // seedrandom（若外部沒載入，提供簡易版）
  function seedLCG(seed) {
    let s = (typeof seed === "number" ? seed : Date.now()) % 2147483647;
    if (s <= 0) s += 2147483646;
    return function () {
      s = (s * 48271) % 2147483647;
      return (s - 1) / 2147483646;
    };
  }
  function seededShuffle(arr, seed) {
    const a = arr.slice();
    const rnd = (window.seedrandom ? window.seedrandom(String(seed)) : seedLCG(seed));
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(rnd() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  }

  // Storage helpers
  const Store = {
    get(key, def = null) {
      try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : def; }
      catch { return def; }
    },
    set(key, val) { localStorage.setItem(key, JSON.stringify(val)); },
    del(key) { localStorage.removeItem(key); }
  };

  // Path helpers
  function pageName() {
    const p = location.pathname.split("/").pop() || "index.html";
    return p.toLowerCase();
  }

  // ---------- Index Page ----------
  function initIndex() {
    const startBtn = $("#startBtn");
    if (!startBtn) return;
    startBtn.addEventListener("click", () => {
      Store.del("basicAnswers");
      Store.del("basicMeta");
      location.href = "quiz.html?mode=basic";
    });
  }

  // ---------- Quiz Page ----------
  async function initQuiz() {
    const qTitle = $("#quizTitle");
    if (!qTitle) return; // not on quiz page
    const qs = new URLSearchParams(location.search);
    const mode = qs.get("mode") || "basic";
    const DATA_URL = mode === "basic" ? "data/items_public_32.json" : "data/items_public_adv_A.json";
    const stateKey = mode === "basic" ? "basicAnswers" : "advAnswers";
    const metaKey = mode === "basic" ? "basicMeta" : "advMeta";

    const titleMap = {
      basic: "第一階段｜32 題（八維傾向）",
      advanced: "第二階段｜進階分析"
    };
    qTitle.textContent = titleMap[mode] || "作答中";

    let items = [];
    let order = [];
    let idx = 0;
    let answers = [];

    const qBox = $("#qBox");
    const bar = $("#bar");
    const form = $("#form");
    const prevBtn = $("#prevBtn");
    const nextBtn = $("#nextBtn");

    // Load items
    const res = await fetch(DATA_URL, { cache: "no-store" });
    items = await res.json();

    // Create order with seed
    const seed = Date.now() % 1000000;
    order = seededShuffle(items.map((_, i) => i), seed);

    // Restore
    const saved = Store.get(stateKey, null);
    const savedMeta = Store.get(metaKey, null);

    if (mode === "basic") {
      if (saved && savedMeta && savedMeta.dataUrl === DATA_URL) {
        answers = saved;
        idx = Math.min(savedMeta.idx ?? 0, order.length - 1);
      } else {
        answers = new Array(items.length).fill(null);
        idx = 0;
      }
    } else {
      // 進階：用一個物件包 A/B/C（先做 A）
      const adv = saved && typeof saved === "object" ? saved : {};
      if (!adv.A) adv.A = new Array(items.length).fill(null);
      answers = adv.A;
      if (savedMeta && savedMeta.dataUrl === DATA_URL) {
        idx = Math.min(savedMeta.idx ?? 0, order.length - 1);
      } else idx = 0;
      // 把物件寫回（確保架構存在）
      Store.set(stateKey, adv);
    }

    render();

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const i = order[idx];
      const v = Number(new FormData(form).get("choice"));
      if (Number.isNaN(v)) return;

      if (mode === "basic") {
        answers[i] = v;
        Store.set(stateKey, answers);
      } else {
        const adv = Store.get(stateKey, {});
        adv.A[i] = v;
        Store.set(stateKey, adv);
      }
      persistMeta();

      if (idx < items.length - 1) {
        idx++;
        form.reset();
        render();
      } else {
        // Done
        if (mode === "basic") {
          const goAdv = confirm("32 題完成！\n按「確定」進入進階 56 題，按「取消」直接看結果。");
          if (goAdv) location.href = "quiz.html?mode=advanced";
          else location.href = "result_basic.html";
        } else {
          // 下一步先回到進階結果頁
          location.href = "result_advanced.html";
        }
      }
    });

    prevBtn.addEventListener("click", () => {
      if (idx > 0) {
        idx--;
        form.reset();
        render();
      }
    });

    function render() {
      const i = order[idx];
      const q = items[i]; // { id, stem, options:[A,B] }

      qBox.innerHTML = `
        <div class="qid">第 ${idx + 1} 題 / 共 ${items.length} 題</div>
        <div class="stem">${escapeHtml(q.stem)}</div>
        <div class="pair">
          <div class="opt A"><span class="badge">A</span> ${escapeHtml(q.options[0])}</div>
          <div class="opt B"><span class="badge">B</span> ${escapeHtml(q.options[1])}</div>
        </div>
      `;

      // re-check
      const currentAnswers = (mode === "basic") ? answers : Store.get(stateKey, {}).A;
      const val = currentAnswers[i];
      const radios = $$("#form input[name='choice']");
      radios.forEach((r) => (r.checked = Number(r.value) === val));

      // progress
      const done = currentAnswers.filter((v) => v !== null).length;
      bar.style.width = Math.round((done / items.length) * 100) + "%";

      // buttons
      prevBtn.disabled = (idx === 0);
      nextBtn.textContent = (idx === items.length - 1) ? "完成" : "下一題";
    }

    function persistMeta() {
      Store.set(metaKey, {
        dataUrl: DATA_URL,
        idx,
        total: items.length,
        ts: Date.now()
      });
    }
  }

  // ---------- Basic Result Page ----------
  function initResultBasic() {
    const distCanvas = $("#distChart");
    if (!distCanvas) return;
    const answers = Store.get("basicAnswers", null);
    if (!answers) {
      alert("找不到 32 題作答紀錄，請先完成測驗。");
      location.href = "quiz.html?mode=basic";
      return;
    }
    const dist = { "-2": 0, "-1": 0, "0": 0, "1": 0, "2": 0 };
    answers.forEach((v) => { if (v !== null) dist[v]++; });

    if (window.Chart) {
      new Chart(distCanvas.getContext("2d"), {
        type: "bar",
        data: {
          labels: ["非常同意A", "較同意A", "中立", "較同意B", "非常同意B"],
          datasets: [{ label: "作答分布（題數）", data: [dist["-2"], dist["-1"], dist["0"], dist["1"], dist["2"]] }]
        },
        options: {
          responsive: true,
          plugins: { legend: { display: false } },
          scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
        }
      });
    }

    const exportBtn = $("#exportBtn");
    if (exportBtn) {
      exportBtn.addEventListener("click", () => {
        const blob = new Blob([JSON.stringify(answers, null, 2)], { type: "application/json" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url; a.download = "basicAnswers.json";
        document.body.appendChild(a); a.click(); a.remove();
        URL.revokeObjectURL(url);
      });
    }
  }

  // ---------- Advanced Result Page ----------
  function initResultAdvanced() {
    const status = $("#status");
    if (!status) return;

    const rows = [];
    const basic = Store.get("basicAnswers", null);
    rows.push(`<li>32 題（八維傾向）：${basic ? "✅ 已完成" : "❌ 未完成"}</li>`);

    const adv = Store.get("advAnswers", null);
    if (adv && typeof adv === "object") {
      rows.push(`<li>進階 A（主外-輔內 24 題）：${Array.isArray(adv.A) && adv.A.some(v => v !== null) ? "✅" : "❌"}</li>`);
      rows.push(`<li>進階 B（主內-輔外 24 題）：${Array.isArray(adv.B) && adv.B.some(v => v !== null) ? "✅" : "❌"}</li>`);
      rows.push(`<li>進階 C（SJ/SP/NT/NF 8 題）：${Array.isArray(adv.C) && adv.C.some(v => v !== null) ? "✅" : "❌"}</li>`);
    } else {
      rows.push("<li>進階題組：❌ 未開始</li>");
    }
    status.innerHTML = rows.join("");
  }

  // ---------- Router ----------
  document.addEventListener("DOMContentLoaded", () => {
    switch (pageName()) {
      case "index.html": initIndex(); break;
      case "quiz.html": initQuiz(); break;
      case "result_basic.html": initResultBasic(); break;
      case "result_advanced.html": initResultAdvanced(); break;
      default: /* no-op */ break;
    }
  });
})();
