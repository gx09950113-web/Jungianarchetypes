
/* ===== app.min.js (rebuild) ===== */
(function () {
  "use strict";

  // ---------- Utils ----------
  const $ = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
  const escapeHtml = (s) => String(s ?? "").replace(/[&<>"']/g, (c) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }[c]));

  // Resilient page detector: prefer DOM probes over URL parsing
  function detectPage() {
    if ($("#startBtn")) return "index";
    if ($("#quizTitle") && $("#form")) return "quiz";
    if ($("#distChart")) return "result_basic";
    if ($("#status")) return "result_advanced";
    // fallback to pathname
    const p = (location.pathname.split("/").pop() || "index.html").toLowerCase();
    if (p.includes("quiz")) return "quiz";
    if (p.includes("result_basic")) return "result_basic";
    if (p.includes("result_advanced")) return "result_advanced";
    return "index";
  }

  // Simple seeded RNG (fallback if seedrandom is absent)
  function seedLCG(seed) {
    let s = (typeof seed === "number" ? seed : Date.now()) % 2147483647;
    if (s <= 0) s += 2147483646;
    return function () {
      s = (s * 48271) % 2147483647;
      return (s - 1) / 2147483646;
    };
  }
  function seededShuffle(arr, seed) {
    const a = arr.slice();
    const rnd = (window.seedrandom ? window.seedrandom(String(seed)) : seedLCG(seed));
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(rnd() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  }

  // Storage helpers (with namespacing to avoid collisions)
  const NS = "jung8v:";
  const Store = {
    get(key, def = null) {
      try { const v = localStorage.getItem(NS + key); return v ? JSON.parse(v) : def; }
      catch { return def; }
    },
    set(key, val) { localStorage.setItem(NS + key, JSON.stringify(val)); },
    del(key) { localStorage.removeItem(NS + key); }
  };

  // ---------- Index ----------
  function initIndex() {
    const startBtn = $("#startBtn");
    if (!startBtn) return;
    startBtn.addEventListener("click", () => {
      Store.del("basicAnswers");
      Store.del("basicMeta");
      location.href = "quiz.html?mode=basic";
    });
  }

  // ---------- Quiz ----------
  async function initQuiz() {
    const qTitle = $("#quizTitle");
    const form = $("#form");
    if (!qTitle || !form) return;

    const qs = new URLSearchParams(location.search);
    const mode = qs.get("mode") || "basic";
    const DATA_URL = mode === "basic" ? "data/items_public_32.json" : "data/items_public_adv_A.json";
    const stateKey = mode === "basic" ? "basicAnswers" : "advAnswers";
    const metaKey = mode === "basic" ? "basicMeta" : "advMeta";
    const titleMap = { basic: "第一階段｜32 題（八維傾向）", advanced: "第二階段｜進階分析" };
    qTitle.textContent = titleMap[mode] || "作答中";

    const qBox = $("#qBox");
    const bar = $("#bar");
    const prevBtn = $("#prevBtn");
    const nextBtn = $("#nextBtn");

    // Ensure radio shortcuts clickable (click A/B block selects radio & submits on double click)
    const clickSelect = (cls, value) => {
      qBox?.addEventListener("click", (e) => {
        const card = e.target.closest(`.${cls}`);
        if (!card) return;
        const r = form.querySelector(`input[name="choice"][value="${value}"]`);
        if (r) { r.checked = true; nextBtn?.removeAttribute("disabled"); }
      });
    };

    let items = [];
    try {
      const res = await fetch(DATA_URL, { cache: "no-store" });
      if (!res.ok) throw new Error(`載入題庫失敗（${res.status}）`);
      items = await res.json();
      if (!Array.isArray(items) || !items.length) throw new Error("題庫格式錯誤或為空");
    } catch (err) {
      console.error(err);
      alert("題庫載入失敗，請檢查 data/ 路徑與檔案是否存在。");
      return;
    }

    // Question order (seeded so it feels random but trackable per session)
    const seed = Number(new Date().toISOString().slice(0,19).replace(/[-:T]/g,"")) % 1000000;
    const order = seededShuffle(items.map((_, i) => i), seed);

    // Restore answers
    let idx = 0;
    let answers;
    const savedMeta = Store.get(metaKey, null);
    if (mode === "basic") {
      answers = Store.get(stateKey, null);
      if (!Array.isArray(answers) || answers.length !== items.length) answers = new Array(items.length).fill(null);
      if (savedMeta?.dataUrl === DATA_URL) idx = Math.min(savedMeta.idx ?? 0, items.length - 1);
    } else {
      const adv = Store.get(stateKey, {}) || {};
      if (!Array.isArray(adv.A) || adv.A.length !== items.length) adv.A = new Array(items.length).fill(null);
      answers = adv.A;
      Store.set(stateKey, adv);
      if (savedMeta?.dataUrl === DATA_URL) idx = Math.min(savedMeta.idx ?? 0, items.length - 1);
    }

    // Wire UI
    clickSelect("A", -2);
    clickSelect("B", 2);

    form.addEventListener("change", () => {
      const v = Number(new FormData(form).get("choice"));
      if (!Number.isNaN(v)) nextBtn?.removeAttribute("disabled");
    });

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const i = order[idx];
      const v = Number(new FormData(form).get("choice"));
      if (Number.isNaN(v)) return;

      if (mode === "basic") {
        answers[i] = v;
        Store.set(stateKey, answers);
      } else {
        const adv = Store.get(stateKey, {});
        adv.A[i] = v;
        Store.set(stateKey, adv);
      }
      persistMeta();

      if (idx < items.length - 1) {
        idx++;
        form.reset();
        nextBtn?.setAttribute("disabled", "true");
        render();
      } else {
        // Finished
        if (mode === "basic") {
          const goAdv = confirm("32 題完成！\n按「確定」進入進階 56 題，按「取消」直接看結果。");
          if (goAdv) location.href = "quiz.html?mode=advanced";
          else location.href = "result_basic.html";
        } else {
          location.href = "result_advanced.html";
        }
      }
    });

    prevBtn?.addEventListener("click", () => {
      if (idx > 0) {
        idx--;
        form.reset();
        nextBtn?.setAttribute("disabled", "true");
        render();
      }
    });

    nextBtn?.addEventListener("click", () => {
      // If button isn't submit type in HTML, ensure submit here
      if (nextBtn.type !== "submit") form.requestSubmit ? form.requestSubmit() : form.submit();
    });

    function render() {
      const i = order[idx];
      const q = items[i]; // { id, stem, options:[A,B] }
      qBox.innerHTML = `
        <div class="qid">第 ${idx + 1} 題 / 共 ${items.length} 題</div>
        <div class="stem">${escapeHtml(q.stem)}</div>
        <div class="pair">
          <button type="button" class="opt A"><span class="badge">A</span> ${escapeHtml(q.options?.[0])}</button>
          <button type="button" class="opt B"><span class="badge">B</span> ${escapeHtml(q.options?.[1])}</button>
        </div>
      `;

      // restore checked radio (if any)
      const current = (mode === "basic") ? answers : (Store.get(stateKey, {}).A || []);
      const val = current[i];
      const radios = $$("#form input[name='choice']");
      radios.forEach((r) => (r.checked = Number(r.value) === val));
      if (val !== null && val !== undefined) nextBtn?.removeAttribute("disabled"); else nextBtn?.setAttribute("disabled","true");

      // progress
      const done = current.filter((v) => v !== null).length;
      if (bar) bar.style.width = Math.round((done / items.length) * 100) + "%";

      // buttons
      if (prevBtn) prevBtn.disabled = (idx === 0);
      if (nextBtn) nextBtn.textContent = (idx === items.length - 1) ? "完成" : "下一題";
    }

    function persistMeta() {
      Store.set(metaKey, { dataUrl: DATA_URL, idx, total: items.length, ts: Date.now() });
    }

    render();
  }

  // ---------- Basic Result ----------
  function initResultBasic() {
    const distCanvas = $("#distChart");
    if (!distCanvas) return;
    const answers = Store.get("basicAnswers", null);
    if (!answers) {
      alert("找不到 32 題作答紀錄，請先完成測驗。");
      location.href = "quiz.html?mode=basic";
      return;
    }
    const dist = { "-2": 0, "-1": 0, "0": 0, "1": 0, "2": 0 };
    answers.forEach((v) => { if (v !== null) dist[v]++; });

    if (window.Chart && distCanvas.getContext) {
      new Chart(distCanvas.getContext("2d"), {
        type: "bar",
        data: {
          labels: ["非常同意A", "較同意A", "中立", "較同意B", "非常同意B"],
          datasets: [{ label: "作答分布（題數）", data: [dist["-2"], dist["-1"], dist["0"], dist["1"], dist["2"]] }]
        },
        options: {
          responsive: true,
          plugins: { legend: { display: false } },
          scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
        }
      });
    }
    $("#exportBtn")?.addEventListener("click", () => {
      const blob = new Blob([JSON.stringify(answers, null, 2)], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url; a.download = "basicAnswers.json";
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(url);
    });
  }

  // ---------- Advanced Result ----------
  function initResultAdvanced() {
    const status = $("#status");
    if (!status) return;
    const rows = [];
    const basic = Store.get("basicAnswers", null);
    rows.push(`<li>32 題（八維傾向）：${basic ? "✅ 已完成" : "❌ 未完成"}</li>`);

    const adv = Store.get("advAnswers", null);
    if (adv && typeof adv === "object") {
      rows.push(`<li>進階 A（主外-輔內 24 題）：${Array.isArray(adv.A) && adv.A.some(v => v !== null) ? "✅" : "❌"}</li>`);
      rows.push(`<li>進階 B（主內-輔外 24 題）：${Array.isArray(adv.B) && adv.B.some(v => v !== null) ? "✅" : "❌"}</li>`);
      rows.push(`<li>進階 C（SJ/SP/NT/NF 8 題）：${Array.isArray(adv.C) && adv.C.some(v => v !== null) ? "✅" : "❌"}</li>`);
    } else {
      rows.push("<li>進階題組：❌ 未開始</li>");
    }
    status.innerHTML = rows.join("");
  }

  // ---------- Bootstrap ----------
  document.addEventListener("DOMContentLoaded", () => {
    const page = detectPage();
    try {
      if (page === "index") initIndex();
      if (page === "quiz") initQuiz();
      if (page === "result_basic") initResultBasic();
      if (page === "result_advanced") initResultAdvanced();
    } catch (e) {
      console.error("[Boot Error]", e);
    }
  });
})();
